// Firestore Security Rules for WhatToEat App
// Includes rules for existing features + Weekly Meal Planner
// Apply these rules in Firebase Console -> Firestore Database -> Rules

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ============================================
    // EXISTING APP COLLECTIONS (preserve functionality)
    // ============================================
    
    // Users collection - users can read/write their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Recipes collection - authenticated users can read all, write their own
    match /recipes/{recipeId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        (request.auth.uid == resource.data.userId || request.auth.uid == request.resource.data.userId);
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // User preferences/profiles
    match /userProfiles/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Saved recipes for users
    match /savedRecipes/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // User ingredients
    match /userIngredients/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // ============================================
    // WEEKLY MEAL PLANNER COLLECTIONS (new feature)
    // ============================================
    
    // Weekly Plans - users can only access their own plans
    match /weeklyPlans/{planId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // User Goals - users can only access their own goals
    match /userGoals/{goalId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Grocery Lists - users can only access their own grocery lists
    match /groceryLists/{listId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Meal Plan Settings - users can only access their own settings
    match /mealPlanSettings/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // ============================================
    // FALLBACK RULES FOR ANY OTHER COLLECTIONS
    // ============================================
    
    // Allow authenticated users to read/write their own data in any other collection
    match /{collection}/{documentId} {
      allow read, write: if request.auth != null && 
        (resource.data.userId == request.auth.uid || request.resource.data.userId == request.auth.uid);
    }
  }
}

// ============================================
// DEPLOYMENT INSTRUCTIONS
// ============================================

// METHOD 1: Firebase Console (Recommended)
// 1. Go to https://console.firebase.google.com/
// 2. Select your project
// 3. Go to Firestore Database
// 4. Click on "Rules" tab
// 5. Replace the existing rules with the above rules
// 6. Click "Publish"

// METHOD 2: Firebase CLI (if you have it installed)
// 1. Save this content to firestore.rules in your project root
// 2. Run: firebase deploy --only firestore:rules

// ============================================
// TESTING RULES (DEVELOPMENT ONLY)
// ============================================

// If you need to test quickly, you can temporarily use these permissive rules:
// WARNING: NEVER use these in production!

/*
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if request.auth != null;
    }
  }
}
*/

// ============================================
// SECURITY NOTES
// ============================================

// These rules ensure:
// ✅ Users can only access their own weekly plans, goals, and grocery lists
// ✅ Existing app functionality is preserved
// ✅ All operations require authentication
// ✅ Users cannot access other users' private data
// ✅ Write operations validate user ownership 