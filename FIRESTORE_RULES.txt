// ============================================
// FIRESTORE SECURITY RULES
// Copy ONLY the rules section (lines 6-157) to Firebase Console → Firestore → Rules → Publish
// ============================================

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner() {
      return isAuthenticated() && request.auth.uid == resource.data.userId;
    }
    
    function isCreatingOwn() {
      return isAuthenticated() && request.auth.uid == request.resource.data.userId;
    }
    
    function canAccessOwn() {
      return isAuthenticated() && 
        (request.auth.uid == resource.data.userId || 
         request.auth.uid == request.resource.data.userId);
    }
    
    // Users collection
    match /users/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // Recipes collection
    match /recipes/{recipeId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || request.auth.uid == request.resource.data.userId);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
    }
    
    // User preferences/profiles
    match /userProfiles/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // Saved recipes for users
    match /savedRecipes/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // User ingredients
    match /userIngredients/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // Weekly Plans
    match /weeklyPlans/{planId} {
      allow read: if isAuthenticated() && 
        (resource == null || request.auth.uid == resource.data.userId);
      allow write: if isAuthenticated() && 
        (resource == null || request.auth.uid == resource.data.userId);
      allow create: if isCreatingOwn();
      allow delete: if isOwner();
    }
    
    // User Goals
    match /userGoals/{goalId} {
      allow read: if isAuthenticated() && 
        (resource == null || request.auth.uid == resource.data.userId);
      allow write: if isAuthenticated() && 
        (resource == null || request.auth.uid == resource.data.userId);
      allow create: if isCreatingOwn();
      allow delete: if isOwner();
    }
    
    // Grocery Lists
    match /groceryLists/{listId} {
      allow read: if isAuthenticated() && 
        (resource == null || request.auth.uid == resource.data.userId);
      allow write: if isAuthenticated() && 
        (resource == null || request.auth.uid == resource.data.userId);
      allow create: if isCreatingOwn();
      allow delete: if isOwner();
    }
    
    // Meal Plan Settings
    match /mealPlanSettings/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // Favorite Recipes
    match /favoriteRecipes/{favoriteId} {
      allow read: if isAuthenticated() && 
        (resource == null || request.auth.uid == resource.data.userId);
      allow write: if isAuthenticated() && 
        (resource == null || request.auth.uid == resource.data.userId);
      allow create: if isCreatingOwn();
      allow delete: if isOwner();
    }
    
    // Recipe History
    match /recipeHistory/{historyId} {
      allow read: if isAuthenticated() && 
        (resource == null || request.auth.uid == resource.data.userId);
      allow write: if isAuthenticated() && 
        (resource == null || request.auth.uid == resource.data.userId);
      allow create: if isCreatingOwn();
      allow delete: if isOwner();
    }
    
    // Health Documents - CRITICAL PRIVACY - ENHANCED SECURITY
    match /healthDocuments/{documentId} {
      allow read: if isAuthenticated() && 
        (resource == null || request.auth.uid == resource.data.userId) &&
        request.auth.uid != null;
      allow write: if isAuthenticated() && 
        (resource == null || request.auth.uid == resource.data.userId) &&
        request.auth.uid != null &&
        request.resource.data.userId == request.auth.uid;
      allow create: if isCreatingOwn() && 
        request.resource.data.keys().hasAll(['userId', 'fileName', 'fileType', 'uploadedAt']) &&
        request.resource.data.userId == request.auth.uid;
      allow delete: if isOwner() && request.auth.uid != null;
    }
    
    // Meal Prep Plans
    match /mealPrepPlans/{planId} {
      allow read: if isAuthenticated() && 
        (resource == null || request.auth.uid == resource.data.userId);
      allow write: if isAuthenticated() && 
        (resource == null || request.auth.uid == resource.data.userId);
      allow create: if isCreatingOwn();
      allow delete: if isOwner();
    }
    
    // Nutrition Entries
    match /nutritionEntries/{entryId} {
      allow read: if isAuthenticated() && 
        (resource == null || request.auth.uid == resource.data.userId);
      allow write: if isAuthenticated() && 
        (resource == null || request.auth.uid == resource.data.userId);
      allow create: if isCreatingOwn();
      allow delete: if isOwner();
    }
    
    // Store Layouts
    match /storeLayouts/{layoutId} {
      allow read: if isAuthenticated() && 
        (resource == null || request.auth.uid == resource.data.userId);
      allow write: if isAuthenticated() && 
        (resource == null || request.auth.uid == resource.data.userId);
      allow create: if isCreatingOwn();
      allow delete: if isOwner();
    }
    
    // Chat Input Results
    match /chatInputResults/{resultId} {
      allow read: if isAuthenticated() && 
        (resource == null || request.auth.uid == resource.data.userId);
      allow write: if isAuthenticated() && 
        (resource == null || request.auth.uid == resource.data.userId);
      allow create: if isCreatingOwn();
      allow delete: if isOwner();
    }
    
    // Fallback rules for any other collections
    match /{collection}/{documentId} {
      allow read: if isAuthenticated() && 
        (resource == null || resource.data.userId == request.auth.uid || request.resource.data.userId == request.auth.uid);
      allow write: if isAuthenticated() && 
        (resource == null || resource.data.userId == request.auth.uid || request.resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
    }
  }
}

// ============================================
// FIRESTORE INDEXES JSON
// Copy ONLY the JSON below (lines 161-240) to your firestore.indexes.json file
// DO NOT copy this to Firebase Console Rules - it will cause errors!
// ============================================

/*
{
  "indexes": [
    {
      "collectionGroup": "healthDocuments",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "userId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "uploadedAt",
          "order": "DESCENDING"
        }
      ]
    },
    {
      "collectionGroup": "healthDocuments",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "userId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "isActive",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "uploadedAt",
          "order": "DESCENDING"
        }
      ]
    },
    {
      "collectionGroup": "weeklyPlans",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "userId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "weekStartDate",
          "order": "DESCENDING"
        }
      ]
    },
    {
      "collectionGroup": "userGoals",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "userId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "createdAt",
          "order": "DESCENDING"
        }
      ]
    },
    {
      "collectionGroup": "mealPrepPlans",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "userId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "weeklyPlanId",
          "order": "ASCENDING"
        }
      ]
    },
    {
      "collectionGroup": "favoriteRecipes",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "userId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "addedAt",
          "order": "DESCENDING"
        }
      ]
    },
    {
      "collectionGroup": "recipeHistory",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "userId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "cookedAt",
          "order": "DESCENDING"
        }
      ]
    },
    {
      "collectionGroup": "chatInputResults",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "userId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "createdAt",
          "order": "DESCENDING"
        }
      ]
    },
    {
      "collectionGroup": "nutritionEntries",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "userId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "date",
          "order": "DESCENDING"
        }
      ]
    }
  ],
  "fieldOverrides": []
}
*/

// ============================================
// DEPLOYMENT INSTRUCTIONS - CRITICAL
// ============================================

// 1. DEPLOY RULES: Copy lines 6-157 to Firebase Console → Firestore → Rules
// 2. DEPLOY INDEXES: Copy lines 163-239 to firestore.indexes.json file
// 3. RUN: firebase deploy --only firestore:indexes

// CLI Commands:
// firebase deploy --only firestore:rules
// firebase deploy --only firestore:indexes
// firebase deploy --only firestore